receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  hostmetrics:
    collection_interval: 60s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.physical.count:
            enabled: true
          system.cpu.logical.count:
            enabled: true
          system.cpu.frequency:
            enabled: true
      disk: {}
      load: {}
      filesystem: {}
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      network: {}
      paging:
        metrics:
          system.paging.utilization:
            enabled: true
      process:
        mute_process_name_error: true
        mute_process_exe_error: true
        mute_process_io_error: true
  # prometheus:
  #   config:
  #     global:
  #       scrape_interval: 60s
  #     scrape_configs:
  #       - job_name: otel-collector-binary
  #         static_configs:
  #           - targets:
processors:
  memory_limiter:
    check_interval: 1s
    limit_mib: 500
    spike_limit_mib: 100

  k8sattributes:
    passthrough: false
    auth_type: serviceAccount
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection
    extract:
      metadata:
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.deployment.name
        - k8s.node.name
        - container.image.name
        - container.image.tag
        - k8s.container.name
        - k8s.pod.start_time
        - service.namespace
        - service.name
        - service.version

  resource:
    attributes:
      - key: cloud.region
        value: asia-south1
        action: upsert
      - key: k8s.cluster.name
        value: core-k8s
        action: upsert

  attributes/environment:
    actions:
      - key: environment
        value: production
        action: upsert

  filter/ottl:
    error_mode: ignore
    traces:
      span:
        - 'IsMatch(attributes["http.route"], ".*/(health|status).*")'
    metrics:
      metric:
        - 'IsMatch(name, "^otelcol_receiver_.*")'
        - 'IsMatch(name, "^otelcol_scraper_.*")'
        - 'IsMatch(instrumentation_scope.name, ".*opentelemetry.*")'
      datapoint:
        - 'IsMatch(attributes["http.route"], ".*/(health|status).*")'

  batch:
    timeout: 30s
    send_batch_size: 1000
    timeout: 10s
  resourcedetection:
    detectors: [env, system]
    timeout: 2s
    system:
      hostname_sources: [os]

extensions:
  health_check: {}
  zpages: {}

exporters:
  prometheusremotewrite:
    # ðŸ‘‡ Replace with your vminsert endpoint
    endpoint: http://victoria-metrics-victoria-metrics-cluster-vminsert:8480/insert/1/prometheus/api/v1/write
    # If VM requires auth, you can add headers:
    # headers:
    #   Authorization: "Bearer <token>"
  logging:
    verbosity: normal

service:
  extensions: [health_check, zpages]
  pipelines:
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheusremotewrite, logging]
    metrics/internal:
      receivers: [prometheus, hostmetrics]
      processors: [resourcedetection, batch]
      exporters: [prometheusremotewrite, logging]
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging]   
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging]   
