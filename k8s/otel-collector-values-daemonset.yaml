
mode: daemonset

image:
  repository: otel/opentelemetry-collector-contrib
  tag: "0.135.0"

serviceAccount:
  create: true
  name: otelcontribcol

# RBAC
clusterRole:
  create: true
  name: otelcontribcol
  rules:
    - apiGroups: [""]
      resources:
        - events
        - namespaces
        - namespaces/status
        - nodes
        - nodes/spec
        - pods
        - pods/status
        - replicationcontrollers
        - replicationcontrollers/status
        - resourcequotas
        - services
        - endpoints
      verbs: [get, list, watch]
    - apiGroups: [apps]
      resources: [daemonsets, deployments, replicasets, statefulsets]
      verbs: [get, list, watch]
    - apiGroups: [extensions]
      resources: [daemonsets, deployments, replicasets]
      verbs: [get, list, watch]
    - apiGroups: [batch]
      resources: [jobs, cronjobs]
      verbs: [get, list, watch]
    - apiGroups: [autoscaling]
      resources: [horizontalpodautoscalers]
      verbs: [get, list, watch]

# Pod configuration
hostNetwork: true
dnsPolicy: ClusterFirstWithHostNet

# Ports configuration - correct format for Helm chart
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP
  debug:
    enabled: true
    containerPort: 2255
    servicePort: 2255
    protocol: TCP
  prometheus:
    enabled: true
    containerPort: 8889
    servicePort: 8889
    protocol: TCP
  zpages:
    enabled: true
    containerPort: 55679
    servicePort: 55679
    protocol: TCP

# Extra volumes and volume mounts
extraVolumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  - name: varlibdockercontainers
    hostPath:
      path: /var/log/containers
  - name: containerdruntime
    hostPath:
      path: /var/lib/docker/containers

extraVolumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/log/containers
    readOnly: true
  - name: containerdruntime
    mountPath: /var/lib/docker/containers
    readOnly: true

# Service configuration
service:
  enabled: true
  type: ClusterIP

# Pod environment variables
extraEnvs:
  - name: KUBE_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  # - name: DD_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: datadog-secret
  #       key: api-key

# OpenTelemetry Configuration
config:
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    filelog:
      include: 
        - /var/log/pods/*/*/*.log
      include_file_name: false
      include_file_path: true
      exclude:
        - /var/log/pods/kube-system*/*/*.log
        - /var/log/pods/*otel-collector*/*/*.log
      start_at: end
      operators:
        - type: container
    hostmetrics:
      collection_interval: 60s
      scrapers:
        paging:
          metrics:
            system.paging.utilization:
              enabled: true
        memory:
          metrics:
            system.memory.utilization:
              enabled: true
        cpu:
          metrics:
            system.cpu.utilization:
              enabled: true
            system.cpu.physical.count:
              enabled: true
            system.cpu.logical.count:
              enabled: true
            system.cpu.frequency:
              enabled: true
        filesystem:
          metrics:
            system.filesystem.utilization:
              enabled: true
        network: {}
        process:
          mute_process_user_error: true
          mute_process_name_error: true
          mute_process_exe_error: true
          mute_process_io_error: true
        disk: {}

  processors:
    batch:
      send_batch_size: 1000
      timeout: 10s
    batch/traces:
      timeout: 1s
      send_batch_size: 100
    attributes:
      actions:
        - key: cluster
          value: "eks-dev"
          action: insert
        - key: environment
          value: "production"
          action: insert
    attributes/traces:
      actions:
        - key: cluster
          value: "eks-dev"
          action: insert
        - key: environment
          value: "production"
          action: insert
    # attributes/rename-trace-span:
    #   actions:
    #     - key: dd.trace_id
    #       from_attribute: trace_id
    #       action: insert
    #     - key: dd.span_id
    #       from_attribute: span_id
    #       action: insert
    resourcedetection:
      detectors:
        - env
        - system
      timeout: 2s
      system:
        hostname_sources:
          - os
    resource:
      attributes:
       - key: host.name
         value: "${KUBE_NODE_NAME}"
         action: upsert
    k8sattributes:
      auth_type: "serviceAccount"
      passthrough: false
      filter:
        node_from_env_var: KUBE_NODE_NAME
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.name
          - container.image.tag
          - container.id
          - k8s.container.name
        labels:
          - tag_name: kube_app_name
            key: app.kubernetes.io/name
            from: pod
          - tag_name: kube_app_instance
            key: app.kubernetes.io/instance
            from: pod
          - tag_name: kube_app_version
            key: app.kubernetes.io/version
            from: pod
          - tag_name: kube_app_component
            key: app.kubernetes.io/component
            from: pod
          - tag_name: kube_app_part_of
            key: app.kubernetes.io/part-of
            from: pod
          - tag_name: kube_app_managed_by
            key: app.kubernetes.io/managed-by
            from: pod
          - tag_name: instance
            key: kubernetes.io/hostname
            from: node
    memory_limiter:
      check_interval: 1s
      limit_mib: 4000
      spike_limit_mib: 800
    filter:
      error_mode: ignore
      metrics:
        metric:
          - 'IsMatch(instrumentation_scope.name, ".*opentelemetry.*") == true'

  extensions:
    health_check: {}
    zpages: {}

  # connectors:
  #   datadog/connector: {}

  exporters:
    otlphttp/logs:
      endpoint: "http://vlc-victoria-logs-cluster-vlinsert.monitoring.svc.cluster.local:9481/insert/opentelemetry"
      tls:
        insecure: true
    otlp/tempo:
      endpoint: "http://redenv-tempo.monitoring.svc.cluster.local:4317"
      tls:
        insecure: true
    otlphttp/tempo:
      endpoint: "http://redenv-tempo.monitoring.svc.cluster.local:4318"
      tls:
        insecure: true
    debug:
      verbosity: detailed
    # datadog:
    #   api:
    #     site: ap1.datadoghq.com
    #     key: ${env:DD_API_KEY}
    prometheus:
      endpoint: "0.0.0.0:8889"
      resource_to_telemetry_conversion:
        enabled: true
    prometheusremotewrite:
      endpoint: 
      resource_to_telemetry_conversion:
        enabled: true

  service:
    extensions:
      - health_check
      - zpages
    pipelines:
      logs:
        receivers: [filelog]
        processors: [memory_limiter, batch]
        exporters: [otlphttp/logs, debug]
      traces:
        receivers: [otlp]
        processors: [memory_limiter, batch/traces, attributes/traces]
        exporters: [otlp/tempo, otlphttp/tempo, debug]
      metrics:
        receivers: [hostmetrics, otlp]
        processors: [memory_limiter, k8sattributes, resource, resourcedetection, batch]
        exporters: [prometheus, prometheusremotewrite]