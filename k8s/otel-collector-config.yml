apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      hostmetrics:
        collection_interval: 60s
        scrapers:
          paging:
            metrics:
              system.paging.utilization:
                enabled: true

          memory:
            metrics:
              system.memory.utilization:
                enabled: true

          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
              system.cpu.physical.count:
                enabled: true
              system.cpu.logical.count:
                enabled: true
              system.cpu.frequency:
                enabled: true

          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true

          network: {}
          process:
            mute_process_user_error: true
            mute_process_name_error: true
            mute_process_exe_error: true
            mute_process_io_error: true
          disk: {}

    processors:
      batch:
        send_batch_size: 1000
        timeout: 10s

      attributes/rename-trace-span:
        actions:
          - key: dd.trace_id
            from_attribute: trace_id
            action: insert
          - key: dd.span_id
            from_attribute: span_id
            action: insert

      resourcedetection:
        detectors:
          - env
          - system
        timeout: 2s
        system:
          hostname_sources:
            - os
      resource:
        attributes:
         - key: host.name
           value: "${KUBE_NODE_NAME}"
           action: upsert
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.node.name
            - k8s.namespace.name
            - k8s.pod.start_time
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.name
            - container.image.tag
            - container.id
            - k8s.container.name
            - container.image.name
            - container.image.tag
            - container.id
          labels:
            - tag_name: kube_app_name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: kube_app_instance
              key: app.kubernetes.io/instance
              from: pod
            - tag_name: kube_app_version
              key: app.kubernetes.io/version
              from: pod
            - tag_name: kube_app_component
              key: app.kubernetes.io/component
              from: pod
            - tag_name: kube_app_part_of
              key: app.kubernetes.io/part-of
              from: pod
            - tag_name: kube_app_managed_by
              key: app.kubernetes.io/managed-by
              from: pod
            - tag_name: instance
              key: kubernetes.io/hostname
              from: node

      memory_limiter:
        check_interval: 1s
        limit_mib: 4000
        spike_limit_mib: 800

      # tail_sampling:
      #   decision_wait: {{ .Values.sampling.decisionWait }}
      #   num_traces: {{ .Values.sampling.numTraces }}
      #   expected_new_traces_per_sec: {{ .Values.sampling.expectedNewTracesPerSec }}
      #   policies:
      #     - name: errors-policy
      #       type: status_code
      #       status_code:
      #         status_codes:
      #           - ERROR
      #     - name: keep-slow-traces
      #       type: latency
      #       latency:
      #         threshold_ms: 500
      #     - name: randomized-policy
      #       type: probabilistic
      #       probabilistic:
      #         sampling_percentage: 25

      filter:
        error_mode: ignore
        metrics:
          metric:
            - 'IsMatch(instrumentation_scope.name, ".*opentelemetry.*") == true'

    extensions:
      health_check: {}
      zpages: {}

    connectors:
      datadog/connector: {}

    exporters:
      debug:
        verbosity: detailed
      datadog:
        api:
          site: ap1.datadoghq.com
          key: ${env:DD_API_KEY}
      prometheus:
        endpoint: "0.0.0.0:8889"
        resource_to_telemetry_conversion:
          enabled: true

      prometheusremotewrite:
        endpoint: http://victoria-metrics-victoria-metrics-cluster-vminsert:8480/insert/1/prometheus/api/v1/write
        resource_to_telemetry_conversion:
          enabled: true

    service:
      extensions:
        - health_check
        - zpages
      pipelines:
        metrics:
          receivers:
            - hostmetrics
            - otlp
            - datadog/connector
          processors:
            - memory_limiter
            - k8sattributes
            - resource
            - resourcedetection
            # - filter
            - batch
          exporters:
            - datadog
            - prometheus
            - prometheusremotewrite
            # - debug
        traces:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - batch
          exporters:
            - datadog/connector
            - datadog
            # - debug
        logs:
          receivers:
            - otlp
          processors:
            - memory_limiter
            - attributes/rename-trace-span
            - batch
          exporters:
            - datadog
            # - debug

